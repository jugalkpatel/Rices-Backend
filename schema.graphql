### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPosts {
  cursorId: String!
  posts: [Post]
}

union BatchPostsResponse = BatchPosts | CommonError

type Comment {
  createdAt: DateTime!
  id: String!
  post: Post
  text: String!
  user: User
  votes: [CommentVote]
}

union CommentResponse = Comment | CommonError

type CommentVote {
  comment: Comment
  createdAt: DateTime!
  id: String!
  type: VoteType!
  votedBy: User
}

union CommentVoteResponse = CommentVote | CommonError

type CommonError {
  message: String!
}

type Community {
  banner: String!
  createdAt: DateTime!
  creator: User
  description: String!
  id: String!
  members: [User]!
  picture: String!
  posts: [Post]
  title: String!
}

type CommunityList {
  communities: [Community]
}

union CommunityListResponse = CommonError | CommunityList

union CommunityResponse = CommonError | Community

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum FilterType {
  NEW
  TOP
}

type IRefresh {
  success: Boolean!
}

union LogoutResponse = CommonError | Success

type Mutation {
  authenticate: UserResponse!
  createBookmark(postId: String!): PostResponse!
  createComment(postId: String!, text: String!): CommentResponse!
  createCommunity(description: String!, name: String!): CommunityResponse!
  createPost(community: String!, content: String!, title: String!): PostResponse!
  createUser(email: String!, name: String!, password: String!): UserResponse!
  joinCommunity(communityId: String!): CommunityResponse!
  leaveCommunity(communityId: String!): CommunityResponse!
  login(email: String!, password: String!): UserResponse!
  logout: LogoutResponse!
  refresh: RefreshResponse!
  register(email: String!, name: String!, password: String!): UserResponse!
  removeBookmark(postId: String!): PostResponse!
  removeCommentVote(commentId: String!, voteId: String!): CommentVoteResponse!
  removeVote(communityId: String!, postId: String!, voteId: String!): VoteResponse!
  vote(data: VoteArgs): VoteResponse!
  voteComment(commentId: String!, type: VoteType!): CommentVoteResponse!
}

type Password {
  id: String!
  password: String!
  user: User
}

type Post {
  bookmarkedBy: [User]
  comments: [Comment]
  community: Community
  content: String!
  createdAt: DateTime!
  id: String!
  postedBy: User
  title: String!
  votes: [Vote]!
}

union PostResponse = CommonError | Post

type Query {
  fetchAllCommunities: CommunityListResponse!
  fetchAllPostsByTime(cursorId: String, skip: Int, take: Int!): BatchPostsResponse!
  fetchAllPostsByVotes(cursorId: String, take: Int!): BatchPostsResponse!
  fetchAllUserPostsByTime(cursorId: String, skip: Int, take: Int!): BatchPostsResponse!
  fetchAllUserPostsByVote(cursorId: String, skip: Int, take: Int!): BatchPostsResponse!
  fetchCommunity(name: String!): CommunityResponse!
  fetchPost(postId: String!): PostResponse!
  fetchUser: UserResponse!
  fetchUserBookmarks(cursorId: String, take: Int!): BatchPostsResponse!
}

union RefreshResponse = CommonError | IRefresh

type Success {
  success: Boolean!
}

type User {
  bookmarks: [Post]
  commentVotes: [CommentVote]!
  commentedOn: [Comment]
  communitiesCreated: [Community!]
  createdAt: DateTime!
  email: String!
  id: String!
  joinedCommunities: [Community!]
  name: String!
  password: Password
  picture: String!
  posts: [Post]
  tokenVersion: Int!
  votes: [Vote]
}

union UserResponse = CommonError | User

type Vote {
  createdAt: DateTime!
  id: String!
  post: Post
  type: VoteType!
  voteUser: User
}

input VoteArgs {
  communityId: String!
  postId: String!
  type: VoteType!
}

union VoteResponse = CommonError | Vote

enum VoteType {
  DOWNVOTE
  UPVOTE
}
