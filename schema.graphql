### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AllCommunities {
  communities: [CommunityResult!]!
}

union AllCommunitiesResponse = AllCommunities | CommunityError

type AuthError implements CommonError {
  message: String!
}

type AuthPayload {
  user: AuthUser!
}

union AuthResponse = AuthError | AuthPayload

type AuthUser {
  email: String!
  id: String!
  name: String!
  picture: String!
}

type Comment {
  createdAt: DateTime!
  id: String!
  post: Post!
  text: String!
  updatedAt: DateTime!
  user: User!
}

interface CommonError {
  message: String!
}

type Community {
  banner: String!
  createdAt: DateTime!
  creator: User!
  description: String!
  id: String!
  members: [User!]
  picture: String!
  posts: [Post]
  title: String!
  updatedAt: DateTime!
}

type CommunityCreator {
  id: String!
  name: String!
}

type CommunityError implements CommonError {
  message: String!
}

type CommunityPost {
  content: String!
  createdAt: DateTime!
  id: String!
  postedBy: CommunityUser!
  title: String!
}

union CommunityResponse = CommunityError | CommunityResult

type CommunityResult {
  id: String!
  title: String!
}

type CommunityUser {
  email: String!
  id: String!
  name: String!
  picture: String!
}

union CreatePostResponse = CreatePostResult | PostError

type CreatePostResult {
  community: String!
  id: String!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type GetCommunityMember {
  id: String!
  name: String!
}

union GetCommunityResponse = CommunityError | GetCommunityResult

type GetCommunityResult {
  banner: String!
  createdAt: DateTime!
  creator: CommunityCreator!
  description: String!
  id: String!
  members: [GetCommunityMember]!
  picture: String!
  posts: [CommunityPost]
  title: String!
  updatedAt: DateTime!
}

union GetPostResponse = IPostType | PostError

union GetUserCommunitiesResponse = IUserCommunites | UserError

type ICommonVote {
  id: String!
  type: VoteType!
  votedBy: IUserWithID!
}

type IJoinCommunityMember {
  id: String!
}

interface IPost {
  content: String!
  createdAt: DateTime!
  id: String!
  title: String!
}

type IPostComment {
  createdAt: DateTime!
  id: String!
  text: String!
  updatedAt: DateTime!
  user: IPostUser!
  votes: [ICommonVote!]
}

type IPostCommunity {
  banner: String!
  createdAt: DateTime!
  description: String!
  id: String!
  members: [IUserWithID!]
  picture: String!
  title: String!
}

type IPostType implements IPost {
  bookmarkedBy: [IUserWithID]
  comments: [IPostComment]
  community: IPostCommunity!
  content: String!
  createdAt: DateTime!
  id: String!
  postedBy: IPostUser!
  title: String!
  votes: [ICommonVote!]
}

type IPostUser {
  id: String!
  name: String!
  picture: String!
}

type IRefresh {
  success: Boolean!
}

type IUser {
  id: String!
}

type IUserCommunites {
  communities: [IUserCommunity]
  id: String!
}

type IUserCommunity {
  id: String!
  picture: String!
  title: String!
}

type IUserQueryResult {
  id: String!
  joinedCommunities: [IUser]!
  name: String!
}

type IUserWithID {
  id: String!
}

union JoinCommunityResponse = CommunityError | IJoinCommunityMember

type JoinCommunityResult {
  members: [IJoinCommunityMember]!
}

type Mutation {
  CreateCommunity(description: String!, name: String!): CommunityResponse!
  JoinCommunity(communityId: String!): JoinCommunityResponse!
  authenticate: AuthResponse!
  createPost(community: String!, content: String!, title: String!): CreatePostResponse!
  leaveCommunity(communityId: String!): JoinCommunityResponse!
  login(email: String!, password: String!): AuthResponse!
  refresh: RefreshResponse!
  register(email: String!, name: String!, password: String!): AuthResponse!
}

type Password {
  id: String!
  password: String!
  user: User!
}

type Post implements IPost {
  comments: [Comment]
  community: Community!
  content: String!
  createdAt: DateTime!
  id: String!
  postedBy: User!
  title: String!
  votes: [Vote]
}

type PostError implements CommonError {
  message: String!
}

type Query {
  GetCommunity(name: String!): GetCommunityResponse!
  allCommunities: AllCommunitiesResponse!
  authenticate: AuthResponse!
  getPost(postId: String!): GetPostResponse!
  getUserCommunities: GetUserCommunitiesResponse!
  user(email: String!): IUserQueryResult!
}

union RefreshResponse = AuthError | IRefresh

type User {
  commentedOn: [Comment]
  communitiesCreated: [Community]
  createdAt: DateTime!
  email: String!
  id: String!
  joinedCommunities: [Community]
  name: String!
  password: Password!
  picture: String!
  posts: [Post]
  tokenVersion: Int!
  updatedAt: DateTime!
  votes: [Vote]
}

type UserError implements CommonError {
  message: String!
}

type Vote {
  createdAt: DateTime!
  id: String!
  post: Post!
  type: VoteType!
  updatedAt: DateTime!
  votedBy: User!
}

enum VoteType {
  DOWNVOTE
  UPVOTE
}
