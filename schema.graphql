### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AllCommunities {
  communities: [CommunityResult!]!
}

union AllCommunitiesResponse = AllCommunities | CommonError

type AuthPayload {
  user: AuthUser!
}

union AuthResponse = AuthPayload | CommonError

type AuthUser {
  email: String!
  id: String!
  name: String!
  picture: String!
}

type Comment {
  createdAt: DateTime!
  id: String!
  post: Post
  text: String!
  user: User
  votes: [CommentVote]
}

union CommentResponse = Comment | CommonError

type CommentVote {
  comment: Comment
  createdAt: DateTime!
  id: String!
  type: VoteType!
  votedBy: User
}

type CommonError {
  message: String!
}

type Community {
  banner: String!
  createdAt: DateTime!
  creator: User
  description: String!
  id: String!
  members: [User]!
  picture: String!
  posts: [Post]
  title: String!
}

type CommunityPost {
  id: String!
}

union CommunityResponse = CommonError | Community

type CommunityResult {
  id: String!
  title: String!
}

type CommunityUser {
  id: String!
}

union CreateCommentResponse = CommonError | IComment

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

union FetchCommunityResponse = CommonError | FetchCommunityResult

type FetchCommunityResult implements ICommunity {
  banner: String!
  createdAt: DateTime!
  creator: CommunityUser!
  description: String!
  id: String!
  members: [CommunityUser]!
  picture: String!
  posts: [IPostType]
  title: String!
  updatedAt: DateTime!
}

union FetchPostCommentsResponse = CommonError | FetchPostCommentsResult

type FetchPostCommentsResult {
  comments: [IComment]
  postId: String!
}

union FetchPostResponse = CommonError | IPostType

union GetUserCommunitiesResponse = CommonError | IUserCommunites

type IComment {
  createdAt: DateTime!
  id: String!
  post: PostWithId!
  text: String!
  updatedAt: DateTime!
  user: IPostUser!
  votes: [ICommonVote]
}

type ICommonVote {
  id: String!
  type: VoteType!
  votedBy: IUserWithID!
}

interface ICommunity {
  banner: String!
  createdAt: DateTime!
  description: String!
  id: String!
  picture: String!
  title: String!
  updatedAt: DateTime!
}

union ICommunityResponse = CommonError | CommunityResult

type IJoinCommunityMember {
  id: String!
}

interface IPost {
  content: String!
  createdAt: DateTime!
  id: String!
  title: String!
}

type IPostCommunity implements ICommunity {
  banner: String!
  createdAt: DateTime!
  description: String!
  id: String!
  picture: String!
  title: String!
  updatedAt: DateTime!
}

type IPostType implements IPost {
  bookmarkedBy: [IUserWithID]
  comments: [IComment]
  community: IPostCommunity!
  content: String!
  createdAt: DateTime!
  id: String!
  postedBy: IPostUser!
  title: String!
  votes: [ICommonVote!]
}

type IPostUser {
  id: String!
  name: String!
  picture: String!
}

type IRefresh {
  success: Boolean!
}

type IUser {
  id: String!
}

type IUserCommunites {
  communities: [IUserCommunity]
  id: String!
}

type IUserCommunity {
  id: String!
  picture: String!
  title: String!
}

type IUserQueryResult {
  id: String!
  joinedCommunities: [IUser]!
  name: String!
}

type IUserWithID {
  id: String!
}

union JoinCommunityResponse = CommonError | IJoinCommunityMember

type JoinCommunityResult {
  members: [IJoinCommunityMember]!
}

type Mutation {
  authenticate: UserResponse!
  createBookmark(postId: String!): UserResponse!
  createComment(postId: String!, text: String!): CommentResponse!
  createCommunity(description: String!, name: String!): CommunityResponse!
  createPost(community: String!, content: String!, title: String!): PostResponse!
  createUser(email: String!, name: String!, password: String!): UserResponse!
  joinCommunity(communityId: String!): CommunityResponse!
  leaveCommunity(communityId: String!): CommunityResponse!
  login(email: String!, password: String!): UserResponse!
  refresh: RefreshResponse!
  register(email: String!, name: String!, password: String!): UserResponse!
  removeBookmark(postId: String!): UserResponse!
}

type Password {
  id: String!
  password: String!
  user: User
}

type Post {
  bookmarkedBy: [User]
  comments: [Comment]
  community: Community
  content: String!
  createdAt: DateTime!
  id: String!
  postedBy: User
  title: String!
  votes: [Vote]!
}

union PostResponse = CommonError | Post

type PostWithId {
  id: String!
}

type Query {
  authenticate: AuthResponse!
  fetchCommunity(name: String!): CommunityResponse!
  fetchPost(postId: String!): PostResponse!
  fetchUser: UserResponse!
}

union RefreshResponse = CommonError | IRefresh

type User {
  bookmarks: [Post]
  commentVotes: [CommentVote]!
  commentedOn: [Comment]
  communitiesCreated: [Community!]
  createdAt: DateTime!
  email: String!
  id: String!
  joinedCommunities: [Community!]
  name: String!
  password: Password
  picture: String!
  posts: [Post]
  tokenVersion: Int!
  votes: [Vote]
}

union UserResponse = CommonError | User

type Vote {
  createdAt: DateTime!
  id: String!
  post: Post
  type: VoteType!
  votedBy: User
}

enum VoteType {
  DOWNVOTE
  UPVOTE
}
