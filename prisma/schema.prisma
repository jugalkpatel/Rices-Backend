// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// postgres://qhzdufwsndtmox:a7415058f2b69fca19b36a168b0ad9ffcd396aac35eeb70269c3b4d9c222585e@ec2-3-211-221-185.compute-1.amazonaws.com:5432/dbsnjjh2es4thb
// postgres://qhzdufwsndtmox:a7415058f2b69fca19b36a168b0ad9ffcd396aac35eeb70269c3b4d9c222585e@ec2-3-211-221-185.compute-1.amazonaws.com:5432/dbsnjjh2es4thb
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  picture            String
  email              String        @unique
  name               String
  tokenVersion       Int           @default(1)
  password           Password?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  joinedCommunities  Community[]   @relation("PartOf")
  communitiesCreated Community[]
  posts              Post[]        @relation("posted by")
  votes              Vote[]        @relation("voted by")
  commentedOn        Comment[]
  bookmarks          Post[]        @relation("bookmark")
  commentVotes       CommentVote[]
}

model Password {
  id       String @id @default(uuid())
  password String
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
}

model Community {
  id          String   @id @default(uuid())
  picture     String
  banner      String
  title       String   @unique @db.VarChar(21)
  description String   @db.VarChar(200)
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  members     User[]   @relation("PartOf")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("postedIn")
}

model Post {
  id           String    @id @default(uuid())
  title        String    @unique @db.VarChar(300)
  content      String
  createdAt    DateTime  @default(now())
  postedBy     User      @relation(fields: [userId], references: [id], name: "posted by")
  userId       String
  community    Community @relation(fields: [communityId], references: [id], name: "postedIn")
  communityId  String
  votes        Vote[]
  comments     Comment[]
  bookmarkedBy User[]    @relation("bookmark")
}

enum Type {
  UPVOTE
  DOWNVOTE
}

model Vote {
  id        String   @id @default(uuid())
  type      Type     @default(UPVOTE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votedBy   User     @relation(fields: [userId], references: [id], name: "voted by")
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Comment {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  text      String
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  votes     CommentVote[]
}

model CommentVote {
  id        String   @id @default(uuid())
  type      Type     @default(UPVOTE)
  comment   Comment  @relation(fields: [commentId], references: [id])
  votedBy   User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  commentId String
}
