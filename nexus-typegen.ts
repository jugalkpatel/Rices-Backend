/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  VoteArgs: { // input type
    communityId: string; // String!
    postId: string; // String!
    type: NexusGenEnums['VoteType']; // VoteType!
  }
}

export interface NexusGenEnums {
  FilterType: "NEW" | "TOP"
  VoteType: "DOWNVOTE" | "UPVOTE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  BatchPosts: { // root type
    cursorId: string; // String!
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Comment: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    text: string; // String!
  }
  CommentVote: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    type: NexusGenEnums['VoteType']; // VoteType!
  }
  CommonError: { // root type
    message: string; // String!
  }
  Community: { // root type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    picture: string; // String!
    title: string; // String!
  }
  CommunityList: { // root type
    communities?: Array<NexusGenRootTypes['Community'] | null> | null; // [Community]
  }
  IRefresh: { // root type
    success: boolean; // Boolean!
  }
  Mutation: {};
  Password: { // root type
    id: string; // String!
    password: string; // String!
  }
  Post: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    title: string; // String!
  }
  Query: {};
  Success: { // root type
    success: boolean; // Boolean!
  }
  User: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    name: string; // String!
    picture: string; // String!
    tokenVersion: number; // Int!
  }
  Vote: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    type: NexusGenEnums['VoteType']; // VoteType!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  BatchPostsResponse: NexusGenRootTypes['BatchPosts'] | NexusGenRootTypes['CommonError'];
  CommentResponse: NexusGenRootTypes['Comment'] | NexusGenRootTypes['CommonError'];
  CommentVoteResponse: NexusGenRootTypes['CommentVote'] | NexusGenRootTypes['CommonError'];
  CommunityListResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['CommunityList'];
  CommunityResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['Community'];
  LogoutResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['Success'];
  PostResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['Post'];
  RefreshResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['IRefresh'];
  UserResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['User'];
  VoteResponse: NexusGenRootTypes['CommonError'] | NexusGenRootTypes['Vote'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  BatchPosts: { // field return type
    cursorId: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
  Comment: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    text: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    votes: Array<NexusGenRootTypes['CommentVote'] | null> | null; // [CommentVote]
  }
  CommentVote: { // field return type
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    type: NexusGenEnums['VoteType']; // VoteType!
    votedBy: NexusGenRootTypes['User'] | null; // User
  }
  CommonError: { // field return type
    message: string; // String!
  }
  Community: { // field return type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User'] | null; // User
    description: string; // String!
    id: string; // String!
    members: Array<NexusGenRootTypes['User'] | null>; // [User]!
    picture: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    title: string; // String!
  }
  CommunityList: { // field return type
    communities: Array<NexusGenRootTypes['Community'] | null> | null; // [Community]
  }
  IRefresh: { // field return type
    success: boolean; // Boolean!
  }
  Mutation: { // field return type
    authenticate: NexusGenRootTypes['UserResponse']; // UserResponse!
    createBookmark: NexusGenRootTypes['PostResponse']; // PostResponse!
    createComment: NexusGenRootTypes['CommentResponse']; // CommentResponse!
    createCommunity: NexusGenRootTypes['CommunityResponse']; // CommunityResponse!
    createPost: NexusGenRootTypes['PostResponse']; // PostResponse!
    createUser: NexusGenRootTypes['UserResponse']; // UserResponse!
    joinCommunity: NexusGenRootTypes['CommunityResponse']; // CommunityResponse!
    leaveCommunity: NexusGenRootTypes['CommunityResponse']; // CommunityResponse!
    login: NexusGenRootTypes['UserResponse']; // UserResponse!
    logout: NexusGenRootTypes['LogoutResponse']; // LogoutResponse!
    refresh: NexusGenRootTypes['RefreshResponse']; // RefreshResponse!
    register: NexusGenRootTypes['UserResponse']; // UserResponse!
    removeBookmark: NexusGenRootTypes['PostResponse']; // PostResponse!
    removeCommentVote: NexusGenRootTypes['CommentVoteResponse']; // CommentVoteResponse!
    removeVote: NexusGenRootTypes['VoteResponse']; // VoteResponse!
    vote: NexusGenRootTypes['VoteResponse']; // VoteResponse!
    voteComment: NexusGenRootTypes['CommentVoteResponse']; // CommentVoteResponse!
  }
  Password: { // field return type
    id: string; // String!
    password: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Post: { // field return type
    bookmarkedBy: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    community: NexusGenRootTypes['Community'] | null; // Community
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    postedBy: NexusGenRootTypes['User'] | null; // User
    title: string; // String!
    votes: Array<NexusGenRootTypes['Vote'] | null>; // [Vote]!
  }
  Query: { // field return type
    fetchAllCommunities: NexusGenRootTypes['CommunityListResponse']; // CommunityListResponse!
    fetchAllPostsByTime: NexusGenRootTypes['BatchPostsResponse']; // BatchPostsResponse!
    fetchAllPostsByVotes: NexusGenRootTypes['BatchPostsResponse']; // BatchPostsResponse!
    fetchAllUserPostsByTime: NexusGenRootTypes['BatchPostsResponse']; // BatchPostsResponse!
    fetchAllUserPostsByVote: NexusGenRootTypes['BatchPostsResponse']; // BatchPostsResponse!
    fetchCommunity: NexusGenRootTypes['CommunityResponse']; // CommunityResponse!
    fetchPost: NexusGenRootTypes['PostResponse']; // PostResponse!
    fetchUser: NexusGenRootTypes['UserResponse']; // UserResponse!
    fetchUserBookmarks: NexusGenRootTypes['BatchPostsResponse']; // BatchPostsResponse!
  }
  Success: { // field return type
    success: boolean; // Boolean!
  }
  User: { // field return type
    bookmarks: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    commentVotes: Array<NexusGenRootTypes['CommentVote'] | null>; // [CommentVote]!
    commentedOn: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    communitiesCreated: NexusGenRootTypes['Community'][] | null; // [Community!]
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    joinedCommunities: NexusGenRootTypes['Community'][] | null; // [Community!]
    name: string; // String!
    password: NexusGenRootTypes['Password'] | null; // Password
    picture: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    tokenVersion: number; // Int!
    votes: Array<NexusGenRootTypes['Vote'] | null> | null; // [Vote]
  }
  Vote: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['Post'] | null; // Post
    type: NexusGenEnums['VoteType']; // VoteType!
    voteUser: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  BatchPosts: { // field return type name
    cursorId: 'String'
    posts: 'Post'
  }
  Comment: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    post: 'Post'
    text: 'String'
    user: 'User'
    votes: 'CommentVote'
  }
  CommentVote: { // field return type name
    comment: 'Comment'
    createdAt: 'DateTime'
    id: 'String'
    type: 'VoteType'
    votedBy: 'User'
  }
  CommonError: { // field return type name
    message: 'String'
  }
  Community: { // field return type name
    banner: 'String'
    createdAt: 'DateTime'
    creator: 'User'
    description: 'String'
    id: 'String'
    members: 'User'
    picture: 'String'
    posts: 'Post'
    title: 'String'
  }
  CommunityList: { // field return type name
    communities: 'Community'
  }
  IRefresh: { // field return type name
    success: 'Boolean'
  }
  Mutation: { // field return type name
    authenticate: 'UserResponse'
    createBookmark: 'PostResponse'
    createComment: 'CommentResponse'
    createCommunity: 'CommunityResponse'
    createPost: 'PostResponse'
    createUser: 'UserResponse'
    joinCommunity: 'CommunityResponse'
    leaveCommunity: 'CommunityResponse'
    login: 'UserResponse'
    logout: 'LogoutResponse'
    refresh: 'RefreshResponse'
    register: 'UserResponse'
    removeBookmark: 'PostResponse'
    removeCommentVote: 'CommentVoteResponse'
    removeVote: 'VoteResponse'
    vote: 'VoteResponse'
    voteComment: 'CommentVoteResponse'
  }
  Password: { // field return type name
    id: 'String'
    password: 'String'
    user: 'User'
  }
  Post: { // field return type name
    bookmarkedBy: 'User'
    comments: 'Comment'
    community: 'Community'
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    postedBy: 'User'
    title: 'String'
    votes: 'Vote'
  }
  Query: { // field return type name
    fetchAllCommunities: 'CommunityListResponse'
    fetchAllPostsByTime: 'BatchPostsResponse'
    fetchAllPostsByVotes: 'BatchPostsResponse'
    fetchAllUserPostsByTime: 'BatchPostsResponse'
    fetchAllUserPostsByVote: 'BatchPostsResponse'
    fetchCommunity: 'CommunityResponse'
    fetchPost: 'PostResponse'
    fetchUser: 'UserResponse'
    fetchUserBookmarks: 'BatchPostsResponse'
  }
  Success: { // field return type name
    success: 'Boolean'
  }
  User: { // field return type name
    bookmarks: 'Post'
    commentVotes: 'CommentVote'
    commentedOn: 'Comment'
    communitiesCreated: 'Community'
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    joinedCommunities: 'Community'
    name: 'String'
    password: 'Password'
    picture: 'String'
    posts: 'Post'
    tokenVersion: 'Int'
    votes: 'Vote'
  }
  Vote: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    post: 'Post'
    type: 'VoteType'
    voteUser: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createBookmark: { // args
      postId: string; // String!
    }
    createComment: { // args
      postId: string; // String!
      text: string; // String!
    }
    createCommunity: { // args
      description: string; // String!
      name: string; // String!
    }
    createPost: { // args
      community: string; // String!
      content: string; // String!
      title: string; // String!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    joinCommunity: { // args
      communityId: string; // String!
    }
    leaveCommunity: { // args
      communityId: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
    removeBookmark: { // args
      postId: string; // String!
    }
    removeCommentVote: { // args
      commentId: string; // String!
      voteId: string; // String!
    }
    removeVote: { // args
      communityId: string; // String!
      postId: string; // String!
      voteId: string; // String!
    }
    vote: { // args
      data?: NexusGenInputs['VoteArgs'] | null; // VoteArgs
    }
    voteComment: { // args
      commentId: string; // String!
      type: NexusGenEnums['VoteType']; // VoteType!
    }
  }
  Query: {
    fetchAllPostsByTime: { // args
      cursorId?: string | null; // String
      skip?: number | null; // Int
      take: number; // Int!
    }
    fetchAllPostsByVotes: { // args
      cursorId?: string | null; // String
      take: number; // Int!
    }
    fetchAllUserPostsByTime: { // args
      cursorId?: string | null; // String
      skip?: number | null; // Int
      take: number; // Int!
    }
    fetchAllUserPostsByVote: { // args
      cursorId?: string | null; // String
      skip?: number | null; // Int
      take: number; // Int!
    }
    fetchCommunity: { // args
      name: string; // String!
    }
    fetchPost: { // args
      postId: string; // String!
    }
    fetchUserBookmarks: { // args
      cursorId?: string | null; // String
      take: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  BatchPostsResponse: "BatchPosts" | "CommonError"
  CommentResponse: "Comment" | "CommonError"
  CommentVoteResponse: "CommentVote" | "CommonError"
  CommunityListResponse: "CommonError" | "CommunityList"
  CommunityResponse: "CommonError" | "Community"
  LogoutResponse: "CommonError" | "Success"
  PostResponse: "CommonError" | "Post"
  RefreshResponse: "CommonError" | "IRefresh"
  UserResponse: "CommonError" | "User"
  VoteResponse: "CommonError" | "Vote"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "BatchPosts" | "Comment" | "CommentVote" | "CommonError" | "Community" | "CommunityList" | "IRefresh" | "Password" | "Post" | "Success" | "User" | "Vote";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}