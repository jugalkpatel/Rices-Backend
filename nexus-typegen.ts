/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AllCommunities: { // root type
    communities: NexusGenRootTypes['CommunityResult'][]; // [CommunityResult!]!
  }
  AuthError: { // root type
    message: string; // String!
  }
  AuthPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  Community: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    description: string; // String!
    id: string; // String!
    members?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    title: string; // String!
  }
  CommunityError: { // root type
    message: string; // String!
  }
  CommunityResult: { // root type
    id: string; // String!
    title: string; // String!
  }
  IRefresh: { // root type
    success: boolean; // Boolean!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // String!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
  CommonError: NexusGenRootTypes['AuthError'] | NexusGenRootTypes['CommunityError'];
}

export interface NexusGenUnions {
  AllCommunitiesResponse: NexusGenRootTypes['AllCommunities'] | NexusGenRootTypes['CommunityError'];
  AuthResponse: NexusGenRootTypes['AuthError'] | NexusGenRootTypes['AuthPayload'];
  CommunityResponse: NexusGenRootTypes['CommunityError'] | NexusGenRootTypes['CommunityResult'];
  GetCommunityResponse: NexusGenRootTypes['Community'] | NexusGenRootTypes['CommunityError'];
  RefreshResponse: NexusGenRootTypes['AuthError'] | NexusGenRootTypes['IRefresh'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AllCommunities: { // field return type
    communities: NexusGenRootTypes['CommunityResult'][]; // [CommunityResult!]!
  }
  AuthError: { // field return type
    message: string; // String!
  }
  AuthPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  Community: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    description: string; // String!
    id: string; // String!
    members: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    title: string; // String!
  }
  CommunityError: { // field return type
    message: string; // String!
  }
  CommunityResult: { // field return type
    id: string; // String!
    title: string; // String!
  }
  IRefresh: { // field return type
    success: boolean; // Boolean!
  }
  Mutation: { // field return type
    CreateCommunity: NexusGenRootTypes['CommunityResponse']; // CommunityResponse!
    authenticate: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    login: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    refresh: NexusGenRootTypes['RefreshResponse']; // RefreshResponse!
    register: NexusGenRootTypes['AuthResponse']; // AuthResponse!
  }
  Query: { // field return type
    GetCommunityResponse: NexusGenRootTypes['GetCommunityResponse']; // GetCommunityResponse!
    allCommunities: NexusGenRootTypes['AllCommunitiesResponse']; // AllCommunitiesResponse!
    authenticate: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    name: string; // String!
  }
  CommonError: { // field return type
    message: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AllCommunities: { // field return type name
    communities: 'CommunityResult'
  }
  AuthError: { // field return type name
    message: 'String'
  }
  AuthPayload: { // field return type name
    user: 'User'
  }
  Community: { // field return type name
    createdAt: 'DateTime'
    creator: 'User'
    description: 'String'
    id: 'String'
    members: 'User'
    title: 'String'
  }
  CommunityError: { // field return type name
    message: 'String'
  }
  CommunityResult: { // field return type name
    id: 'String'
    title: 'String'
  }
  IRefresh: { // field return type name
    success: 'Boolean'
  }
  Mutation: { // field return type name
    CreateCommunity: 'CommunityResponse'
    authenticate: 'AuthResponse'
    login: 'AuthResponse'
    refresh: 'RefreshResponse'
    register: 'AuthResponse'
  }
  Query: { // field return type name
    GetCommunityResponse: 'GetCommunityResponse'
    allCommunities: 'AllCommunitiesResponse'
    authenticate: 'AuthResponse'
    user: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
  }
  CommonError: { // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreateCommunity: { // args
      description: string; // String!
      name: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
  }
  Query: {
    GetCommunityResponse: { // args
      name: string; // String!
    }
    user: { // args
      email: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AllCommunitiesResponse: "AllCommunities" | "CommunityError"
  AuthResponse: "AuthError" | "AuthPayload"
  CommunityResponse: "CommunityError" | "CommunityResult"
  GetCommunityResponse: "Community" | "CommunityError"
  RefreshResponse: "AuthError" | "IRefresh"
  CommonError: "AuthError" | "CommunityError"
}

export interface NexusGenTypeInterfaces {
  AuthError: "CommonError"
  CommunityError: "CommonError"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "AllCommunities" | "AuthError" | "AuthPayload" | "Community" | "CommunityError" | "CommunityResult" | "IRefresh";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}