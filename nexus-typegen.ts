/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  VoteType: "DOWNVOTE" | "UPVOTE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AllCommunities: { // root type
    communities: NexusGenRootTypes['CommunityResult'][]; // [CommunityResult!]!
  }
  AuthError: { // root type
    message: string; // String!
  }
  AuthPayload: { // root type
    user: NexusGenRootTypes['AuthUser']; // AuthUser!
  }
  AuthUser: { // root type
    email: string; // String!
    id: string; // String!
    name: string; // String!
    picture: string; // String!
  }
  Comment: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['PostWithId']; // PostWithId!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['IPostUser']; // IPostUser!
    votes?: Array<NexusGenRootTypes['ICommonVote'] | null> | null; // [ICommonVote]
  }
  CommentError: { // root type
    message: string; // String!
  }
  Community: { // root type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    description: string; // String!
    id: string; // String!
    members?: NexusGenRootTypes['User'][] | null; // [User!]
    picture: string; // String!
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CommunityError: { // root type
    message: string; // String!
  }
  CommunityPost: { // root type
    id: string; // String!
  }
  CommunityResult: { // root type
    id: string; // String!
    title: string; // String!
  }
  CommunityUser: { // root type
    id: string; // String!
  }
  CreatePostResult: { // root type
    community: string; // String!
    id: string; // String!
    title: string; // String!
  }
  FetchCommunityResult: { // root type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['CommunityUser']; // CommunityUser!
    description: string; // String!
    id: string; // String!
    members: Array<NexusGenRootTypes['CommunityUser'] | null>; // [CommunityUser]!
    picture: string; // String!
    posts?: Array<NexusGenRootTypes['IPostType'] | null> | null; // [IPostType]
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FetchPostCommentsResult: { // root type
    comments?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    postId: string; // String!
  }
  ICommonVote: { // root type
    id: string; // String!
    type: NexusGenEnums['VoteType']; // VoteType!
    votedBy: NexusGenRootTypes['IUserWithID']; // IUserWithID!
  }
  IJoinCommunityMember: { // root type
    id: string; // String!
  }
  IPostCommunity: { // root type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    picture: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  IPostType: { // root type
    bookmarkedBy?: Array<NexusGenRootTypes['IUserWithID'] | null> | null; // [IUserWithID]
    comments?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    community: NexusGenRootTypes['IPostCommunity']; // IPostCommunity!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    postedBy: NexusGenRootTypes['IPostUser']; // IPostUser!
    title: string; // String!
    votes?: NexusGenRootTypes['ICommonVote'][] | null; // [ICommonVote!]
  }
  IPostUser: { // root type
    id: string; // String!
    name: string; // String!
    picture: string; // String!
  }
  IRefresh: { // root type
    success: boolean; // Boolean!
  }
  IUser: { // root type
    id: string; // String!
  }
  IUserCommunites: { // root type
    communities?: Array<NexusGenRootTypes['IUserCommunity'] | null> | null; // [IUserCommunity]
    id: string; // String!
  }
  IUserCommunity: { // root type
    id: string; // String!
    picture: string; // String!
    title: string; // String!
  }
  IUserQueryResult: { // root type
    id: string; // String!
    joinedCommunities: Array<NexusGenRootTypes['IUser'] | null>; // [IUser]!
    name: string; // String!
  }
  IUserWithID: { // root type
    id: string; // String!
  }
  JoinCommunityResult: { // root type
    members: Array<NexusGenRootTypes['IJoinCommunityMember'] | null>; // [IJoinCommunityMember]!
  }
  Mutation: {};
  Password: { // root type
    id: string; // String!
    password: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Post: { // root type
    comments?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    community: NexusGenRootTypes['Community']; // Community!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    postedBy: NexusGenRootTypes['User']; // User!
    title: string; // String!
    votes?: Array<NexusGenRootTypes['Vote'] | null> | null; // [Vote]
  }
  PostError: { // root type
    message: string; // String!
  }
  PostWithId: { // root type
    id: string; // String!
  }
  Query: {};
  User: { // root type
    commentedOn?: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    communitiesCreated?: Array<NexusGenRootTypes['Community'] | null> | null; // [Community]
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    joinedCommunities?: Array<NexusGenRootTypes['Community'] | null> | null; // [Community]
    name: string; // String!
    password: NexusGenRootTypes['Password']; // Password!
    picture: string; // String!
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    tokenVersion: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    votes?: Array<NexusGenRootTypes['Vote'] | null> | null; // [Vote]
  }
  UserError: { // root type
    message: string; // String!
  }
  Vote: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['Post']; // Post!
    type: NexusGenEnums['VoteType']; // VoteType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    votedBy: NexusGenRootTypes['User']; // User!
  }
}

export interface NexusGenInterfaces {
  CommonError: NexusGenRootTypes['AuthError'] | NexusGenRootTypes['CommentError'] | NexusGenRootTypes['CommunityError'] | NexusGenRootTypes['PostError'] | NexusGenRootTypes['UserError'];
  ICommunity: NexusGenRootTypes['Community'] | NexusGenRootTypes['FetchCommunityResult'] | NexusGenRootTypes['IPostCommunity'];
  IPost: NexusGenRootTypes['IPostType'] | NexusGenRootTypes['Post'];
}

export interface NexusGenUnions {
  AllCommunitiesResponse: NexusGenRootTypes['AllCommunities'] | NexusGenRootTypes['CommunityError'];
  AuthResponse: NexusGenRootTypes['AuthError'] | NexusGenRootTypes['AuthPayload'];
  CommunityResponse: NexusGenRootTypes['CommunityError'] | NexusGenRootTypes['CommunityResult'];
  CreateCommentResponse: NexusGenRootTypes['Comment'] | NexusGenRootTypes['CommentError'];
  CreatePostResponse: NexusGenRootTypes['CreatePostResult'] | NexusGenRootTypes['PostError'];
  FetchCommunityResponse: NexusGenRootTypes['CommunityError'] | NexusGenRootTypes['FetchCommunityResult'];
  FetchPostCommentsResponse: NexusGenRootTypes['CommentError'] | NexusGenRootTypes['FetchPostCommentsResult'];
  FetchPostResponse: NexusGenRootTypes['IPostType'] | NexusGenRootTypes['PostError'];
  GetUserCommunitiesResponse: NexusGenRootTypes['IUserCommunites'] | NexusGenRootTypes['UserError'];
  JoinCommunityResponse: NexusGenRootTypes['CommunityError'] | NexusGenRootTypes['IJoinCommunityMember'];
  RefreshResponse: NexusGenRootTypes['AuthError'] | NexusGenRootTypes['IRefresh'];
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AllCommunities: { // field return type
    communities: NexusGenRootTypes['CommunityResult'][]; // [CommunityResult!]!
  }
  AuthError: { // field return type
    message: string; // String!
  }
  AuthPayload: { // field return type
    user: NexusGenRootTypes['AuthUser']; // AuthUser!
  }
  AuthUser: { // field return type
    email: string; // String!
    id: string; // String!
    name: string; // String!
    picture: string; // String!
  }
  Comment: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['PostWithId']; // PostWithId!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['IPostUser']; // IPostUser!
    votes: Array<NexusGenRootTypes['ICommonVote'] | null> | null; // [ICommonVote]
  }
  CommentError: { // field return type
    message: string; // String!
  }
  Community: { // field return type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['User']; // User!
    description: string; // String!
    id: string; // String!
    members: NexusGenRootTypes['User'][] | null; // [User!]
    picture: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  CommunityError: { // field return type
    message: string; // String!
  }
  CommunityPost: { // field return type
    id: string; // String!
  }
  CommunityResult: { // field return type
    id: string; // String!
    title: string; // String!
  }
  CommunityUser: { // field return type
    id: string; // String!
  }
  CreatePostResult: { // field return type
    community: string; // String!
    id: string; // String!
    title: string; // String!
  }
  FetchCommunityResult: { // field return type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['CommunityUser']; // CommunityUser!
    description: string; // String!
    id: string; // String!
    members: Array<NexusGenRootTypes['CommunityUser'] | null>; // [CommunityUser]!
    picture: string; // String!
    posts: Array<NexusGenRootTypes['IPostType'] | null> | null; // [IPostType]
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  FetchPostCommentsResult: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    postId: string; // String!
  }
  ICommonVote: { // field return type
    id: string; // String!
    type: NexusGenEnums['VoteType']; // VoteType!
    votedBy: NexusGenRootTypes['IUserWithID']; // IUserWithID!
  }
  IJoinCommunityMember: { // field return type
    id: string; // String!
  }
  IPostCommunity: { // field return type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    picture: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  IPostType: { // field return type
    bookmarkedBy: Array<NexusGenRootTypes['IUserWithID'] | null> | null; // [IUserWithID]
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    community: NexusGenRootTypes['IPostCommunity']; // IPostCommunity!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    postedBy: NexusGenRootTypes['IPostUser']; // IPostUser!
    title: string; // String!
    votes: NexusGenRootTypes['ICommonVote'][] | null; // [ICommonVote!]
  }
  IPostUser: { // field return type
    id: string; // String!
    name: string; // String!
    picture: string; // String!
  }
  IRefresh: { // field return type
    success: boolean; // Boolean!
  }
  IUser: { // field return type
    id: string; // String!
  }
  IUserCommunites: { // field return type
    communities: Array<NexusGenRootTypes['IUserCommunity'] | null> | null; // [IUserCommunity]
    id: string; // String!
  }
  IUserCommunity: { // field return type
    id: string; // String!
    picture: string; // String!
    title: string; // String!
  }
  IUserQueryResult: { // field return type
    id: string; // String!
    joinedCommunities: Array<NexusGenRootTypes['IUser'] | null>; // [IUser]!
    name: string; // String!
  }
  IUserWithID: { // field return type
    id: string; // String!
  }
  JoinCommunityResult: { // field return type
    members: Array<NexusGenRootTypes['IJoinCommunityMember'] | null>; // [IJoinCommunityMember]!
  }
  Mutation: { // field return type
    CreateCommunity: NexusGenRootTypes['CommunityResponse']; // CommunityResponse!
    JoinCommunity: NexusGenRootTypes['JoinCommunityResponse']; // JoinCommunityResponse!
    authenticate: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    createComment: NexusGenRootTypes['CreateCommentResponse']; // CreateCommentResponse!
    createPost: NexusGenRootTypes['CreatePostResponse']; // CreatePostResponse!
    leaveCommunity: NexusGenRootTypes['JoinCommunityResponse']; // JoinCommunityResponse!
    login: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    refresh: NexusGenRootTypes['RefreshResponse']; // RefreshResponse!
    register: NexusGenRootTypes['AuthResponse']; // AuthResponse!
  }
  Password: { // field return type
    id: string; // String!
    password: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Post: { // field return type
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    community: NexusGenRootTypes['Community']; // Community!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    postedBy: NexusGenRootTypes['User']; // User!
    title: string; // String!
    votes: Array<NexusGenRootTypes['Vote'] | null> | null; // [Vote]
  }
  PostError: { // field return type
    message: string; // String!
  }
  PostWithId: { // field return type
    id: string; // String!
  }
  Query: { // field return type
    allCommunities: NexusGenRootTypes['AllCommunitiesResponse']; // AllCommunitiesResponse!
    authenticate: NexusGenRootTypes['AuthResponse']; // AuthResponse!
    fetchCommunity: NexusGenRootTypes['FetchCommunityResponse']; // FetchCommunityResponse!
    fetchPost: NexusGenRootTypes['FetchPostResponse']; // FetchPostResponse!
    fetchPostComments: NexusGenRootTypes['FetchPostCommentsResponse']; // FetchPostCommentsResponse!
    getUserCommunities: NexusGenRootTypes['GetUserCommunitiesResponse']; // GetUserCommunitiesResponse!
    user: NexusGenRootTypes['IUserQueryResult']; // IUserQueryResult!
  }
  User: { // field return type
    commentedOn: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    communitiesCreated: Array<NexusGenRootTypes['Community'] | null> | null; // [Community]
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    joinedCommunities: Array<NexusGenRootTypes['Community'] | null> | null; // [Community]
    name: string; // String!
    password: NexusGenRootTypes['Password']; // Password!
    picture: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    tokenVersion: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    votes: Array<NexusGenRootTypes['Vote'] | null> | null; // [Vote]
  }
  UserError: { // field return type
    message: string; // String!
  }
  Vote: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    post: NexusGenRootTypes['Post']; // Post!
    type: NexusGenEnums['VoteType']; // VoteType!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    votedBy: NexusGenRootTypes['User']; // User!
  }
  CommonError: { // field return type
    message: string; // String!
  }
  ICommunity: { // field return type
    banner: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    picture: string; // String!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  IPost: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    title: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AllCommunities: { // field return type name
    communities: 'CommunityResult'
  }
  AuthError: { // field return type name
    message: 'String'
  }
  AuthPayload: { // field return type name
    user: 'AuthUser'
  }
  AuthUser: { // field return type name
    email: 'String'
    id: 'String'
    name: 'String'
    picture: 'String'
  }
  Comment: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    post: 'PostWithId'
    text: 'String'
    updatedAt: 'DateTime'
    user: 'IPostUser'
    votes: 'ICommonVote'
  }
  CommentError: { // field return type name
    message: 'String'
  }
  Community: { // field return type name
    banner: 'String'
    createdAt: 'DateTime'
    creator: 'User'
    description: 'String'
    id: 'String'
    members: 'User'
    picture: 'String'
    posts: 'Post'
    title: 'String'
    updatedAt: 'DateTime'
  }
  CommunityError: { // field return type name
    message: 'String'
  }
  CommunityPost: { // field return type name
    id: 'String'
  }
  CommunityResult: { // field return type name
    id: 'String'
    title: 'String'
  }
  CommunityUser: { // field return type name
    id: 'String'
  }
  CreatePostResult: { // field return type name
    community: 'String'
    id: 'String'
    title: 'String'
  }
  FetchCommunityResult: { // field return type name
    banner: 'String'
    createdAt: 'DateTime'
    creator: 'CommunityUser'
    description: 'String'
    id: 'String'
    members: 'CommunityUser'
    picture: 'String'
    posts: 'IPostType'
    title: 'String'
    updatedAt: 'DateTime'
  }
  FetchPostCommentsResult: { // field return type name
    comments: 'Comment'
    postId: 'String'
  }
  ICommonVote: { // field return type name
    id: 'String'
    type: 'VoteType'
    votedBy: 'IUserWithID'
  }
  IJoinCommunityMember: { // field return type name
    id: 'String'
  }
  IPostCommunity: { // field return type name
    banner: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    picture: 'String'
    title: 'String'
    updatedAt: 'DateTime'
  }
  IPostType: { // field return type name
    bookmarkedBy: 'IUserWithID'
    comments: 'Comment'
    community: 'IPostCommunity'
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    postedBy: 'IPostUser'
    title: 'String'
    votes: 'ICommonVote'
  }
  IPostUser: { // field return type name
    id: 'String'
    name: 'String'
    picture: 'String'
  }
  IRefresh: { // field return type name
    success: 'Boolean'
  }
  IUser: { // field return type name
    id: 'String'
  }
  IUserCommunites: { // field return type name
    communities: 'IUserCommunity'
    id: 'String'
  }
  IUserCommunity: { // field return type name
    id: 'String'
    picture: 'String'
    title: 'String'
  }
  IUserQueryResult: { // field return type name
    id: 'String'
    joinedCommunities: 'IUser'
    name: 'String'
  }
  IUserWithID: { // field return type name
    id: 'String'
  }
  JoinCommunityResult: { // field return type name
    members: 'IJoinCommunityMember'
  }
  Mutation: { // field return type name
    CreateCommunity: 'CommunityResponse'
    JoinCommunity: 'JoinCommunityResponse'
    authenticate: 'AuthResponse'
    createComment: 'CreateCommentResponse'
    createPost: 'CreatePostResponse'
    leaveCommunity: 'JoinCommunityResponse'
    login: 'AuthResponse'
    refresh: 'RefreshResponse'
    register: 'AuthResponse'
  }
  Password: { // field return type name
    id: 'String'
    password: 'String'
    user: 'User'
  }
  Post: { // field return type name
    comments: 'Comment'
    community: 'Community'
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    postedBy: 'User'
    title: 'String'
    votes: 'Vote'
  }
  PostError: { // field return type name
    message: 'String'
  }
  PostWithId: { // field return type name
    id: 'String'
  }
  Query: { // field return type name
    allCommunities: 'AllCommunitiesResponse'
    authenticate: 'AuthResponse'
    fetchCommunity: 'FetchCommunityResponse'
    fetchPost: 'FetchPostResponse'
    fetchPostComments: 'FetchPostCommentsResponse'
    getUserCommunities: 'GetUserCommunitiesResponse'
    user: 'IUserQueryResult'
  }
  User: { // field return type name
    commentedOn: 'Comment'
    communitiesCreated: 'Community'
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    joinedCommunities: 'Community'
    name: 'String'
    password: 'Password'
    picture: 'String'
    posts: 'Post'
    tokenVersion: 'Int'
    updatedAt: 'DateTime'
    votes: 'Vote'
  }
  UserError: { // field return type name
    message: 'String'
  }
  Vote: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    post: 'Post'
    type: 'VoteType'
    updatedAt: 'DateTime'
    votedBy: 'User'
  }
  CommonError: { // field return type name
    message: 'String'
  }
  ICommunity: { // field return type name
    banner: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    picture: 'String'
    title: 'String'
    updatedAt: 'DateTime'
  }
  IPost: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreateCommunity: { // args
      description: string; // String!
      name: string; // String!
    }
    JoinCommunity: { // args
      communityId: string; // String!
    }
    createComment: { // args
      postId: string; // String!
      text: string; // String!
    }
    createPost: { // args
      community: string; // String!
      content: string; // String!
      title: string; // String!
    }
    leaveCommunity: { // args
      communityId: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    register: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
  }
  Query: {
    fetchCommunity: { // args
      name: string; // String!
    }
    fetchPost: { // args
      postId: string; // String!
    }
    fetchPostComments: { // args
      postId: string; // String!
    }
    user: { // args
      email: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  AllCommunitiesResponse: "AllCommunities" | "CommunityError"
  AuthResponse: "AuthError" | "AuthPayload"
  CommunityResponse: "CommunityError" | "CommunityResult"
  CreateCommentResponse: "Comment" | "CommentError"
  CreatePostResponse: "CreatePostResult" | "PostError"
  FetchCommunityResponse: "CommunityError" | "FetchCommunityResult"
  FetchPostCommentsResponse: "CommentError" | "FetchPostCommentsResult"
  FetchPostResponse: "IPostType" | "PostError"
  GetUserCommunitiesResponse: "IUserCommunites" | "UserError"
  JoinCommunityResponse: "CommunityError" | "IJoinCommunityMember"
  RefreshResponse: "AuthError" | "IRefresh"
  CommonError: "AuthError" | "CommentError" | "CommunityError" | "PostError" | "UserError"
  ICommunity: "Community" | "FetchCommunityResult" | "IPostCommunity"
  IPost: "IPostType" | "Post"
}

export interface NexusGenTypeInterfaces {
  AuthError: "CommonError"
  CommentError: "CommonError"
  Community: "ICommunity"
  CommunityError: "CommonError"
  FetchCommunityResult: "ICommunity"
  IPostCommunity: "ICommunity"
  IPostType: "IPost"
  Post: "IPost"
  PostError: "CommonError"
  UserError: "CommonError"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = "AllCommunities" | "AuthError" | "AuthPayload" | "Comment" | "CommentError" | "Community" | "CommunityError" | "CommunityResult" | "CreatePostResult" | "FetchCommunityResult" | "FetchPostCommentsResult" | "IJoinCommunityMember" | "IPostCommunity" | "IPostType" | "IRefresh" | "IUserCommunites" | "JoinCommunityResult" | "Password" | "Post" | "PostError" | "UserError";

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}